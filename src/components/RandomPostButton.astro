---
import { getCollection } from 'astro:content';

// Get all posts (excluding templates) at build time
const music = await getCollection('music', ({ data }) => !data.isTemplate);
const making = await getCollection('making', ({ data }) => !data.isTemplate);
const thoughts = await getCollection('thoughts', ({ data }) => !data.isTemplate);
const consuming = await getCollection('consuming', ({ data }) => !data.isTemplate);
const work = await getCollection('work', ({ data }) => !data.isTemplate);

const allPosts = [
  ...music.map(p => ({ ...p, collection: 'music' })),
  ...making.map(p => ({ ...p, collection: 'making' })),
  ...thoughts.map(p => ({ ...p, collection: 'thoughts' })),
  ...consuming.map(p => ({ ...p, collection: 'consuming' })),
  ...work.map(p => ({ ...p, collection: 'work' })),
];
---

<button 
  type="button"
  id="random-post-btn"
  class="nav-link text-sm font-medium text-text-secondary-light dark:text-text-secondary transition-colors hover:text-accent font-mono block w-full text-left py-2 rounded hover:bg-surface-light dark:hover:bg-surface md:w-auto md:py-0 md:hover:bg-transparent cursor-pointer select-none"
  title="Random post"
  aria-label="Go to random post"
>
  <span class="md:hidden">ðŸŽ² Random post</span>
  <span class="hidden md:inline">ðŸŽ²</span>
</button>

<script define:vars={{ allPosts }}>
  const randomBtn = document.getElementById('random-post-btn');
  
  let touchStarted = false;
  
  const handleRandomPost = (e) => {
    // Prevent event propagation and default behavior
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    console.log('[Random Button] Button activated');
    
    // Filter out templates and posts without published status
    const validPosts = allPosts.filter(post => 
      !post.data?.isTemplate && 
      post.data?.published !== false &&
      post.data?.date // Only posts with dates
    );
    
    console.log('[Random Button] Valid posts found:', validPosts.length);
    
    if (validPosts.length === 0) {
      console.error('[Random Button] No valid posts available for random selection');
      return;
    }
    
    const randomIndex = Math.floor(Math.random() * validPosts.length);
    const randomPost = validPosts[randomIndex];
    const url = `/${randomPost.collection}/${randomPost.slug}/`;
    
    console.log('[Random Button] Navigating to:', url);
    
    // Use window.location.href for reliable mobile navigation
    window.location.href = url;
  };
  
  if (randomBtn) {
    // Handle touch start to track touch events
    randomBtn.addEventListener('touchstart', (e) => {
      console.log('[Random Button] Touch start');
      touchStarted = true;
    }, { passive: true });
    
    // Handle touch end
    randomBtn.addEventListener('touchend', (e) => {
      console.log('[Random Button] Touch end');
      if (touchStarted) {
        touchStarted = false;
        handleRandomPost(e);
      }
    });
    
    // Handle click for desktop (only if touch didn't fire)
    randomBtn.addEventListener('click', (e) => {
      console.log('[Random Button] Click event');
      // Small delay to see if touch event fired first
      setTimeout(() => {
        if (!touchStarted) {
          handleRandomPost(e);
        }
      }, 10);
    });
    
    // Ensure button is focusable and accessible
    randomBtn.setAttribute('tabindex', '0');
    
    // Handle keyboard activation
    randomBtn.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        console.log('[Random Button] Keyboard activation');
        handleRandomPost(e);
      }
    });
  } else {
    console.error('[Random Button] Button element not found');
  }
</script>
